/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Name of the worker node that generated the response.
 */
export type NodeName = string;
/**
 * The time, in milliseconds, it took to generate the response.
 */
export type NodeTime = number;
/**
 * The version of the API that returned the response.
 */
export type APIVersion = string;
/**
 * The code as a string.
 */
export type Code1 = string;
/**
 * The estimated probability of the recognized code being correct as a percentage between 0 and 100.
 */
export type Confidence = number;
/**
 * A boolean indicating whether a code has been found on the image.
 */
export type Found = boolean;
/**
 * The code found on the image as a string.
 */
export type Text = string;
/**
 * The estimated probability of the recognized code being correct as a percentage between 0 and 100.
 */
export type Confidence1 = number;
/**
 * The numeric code of the character.
 */
export type Code2 = number;
/**
 * A boolean indicating whether the background is darker than the character found.
 */
export type DarkBackground = boolean;
/**
 * The blue component of the color, 0-255.
 */
export type Blue = number;
/**
 * The green component of the color, 0-255.
 */
export type Green = number;
/**
 * The red component of the color, 0-255.
 */
export type Red = number;
/**
 * The blue component of the color, 0-255.
 */
export type Blue1 = number;
/**
 * The green component of the color, 0-255.
 */
export type Green1 = number;
/**
 * The red component of the color, 0-255.
 */
export type Red1 = number;
/**
 * The estimated probability of the recognized character being correct as a percentage between 0 and 100.
 */
export type Confidence2 = number;
/**
 * The X coordinate of the corner.
 */
export type XCoordinate = number;
/**
 * The Y coordinate of the corner.
 */
export type YCoordinate = number;
/**
 * The X coordinate of the corner.
 */
export type XCoordinate1 = number;
/**
 * The Y coordinate of the corner.
 */
export type YCoordinate1 = number;
/**
 * The X coordinate of the corner.
 */
export type XCoordinate2 = number;
/**
 * The Y coordinate of the corner.
 */
export type YCoordinate2 = number;
/**
 * The X coordinate of the corner.
 */
export type XCoordinate3 = number;
/**
 * The Y coordinate of the corner.
 */
export type YCoordinate3 = number;
/**
 * An array of objects which describe each character of the recognized code.
 */
export type Characters = Character[];
/**
 * An array in which each item corresponds to one image uploaded. The items are objects that describe the recognition results found on their respective input images.
 */
export type ImageResults = ImageResult[];
/**
 * An array containing all codes recognized on the images uploaded.
 */
export type Codes = Code[];

/**
 * Response object returned by the Transportation & Cargo API on successful execution.
 */
export interface TransportationCargoAPIResponse {
  nodename?: NodeName;
  nodetime?: NodeTime;
  version?: APIVersion;
  data?: ImageRecognitionResult;
  [k: string]: unknown;
}
/**
 * An object containing the results of the OCR operation.
 */
export interface ImageRecognitionResult {
  codes?: Codes;
  [k: string]: unknown;
}
/**
 * An object representing a code recognized by the OCR engine.
 */
export interface Code {
  code?: Code1;
  confidence?: Confidence;
  imageResults?: ImageResults;
  [k: string]: unknown;
}
/**
 * An object that describes the recognition results found on an uploaded image.
 */
export interface ImageResult {
  found?: Found;
  text?: Text;
  confidence?: Confidence1;
  characters?: Characters;
  [k: string]: unknown;
}
/**
 * An object containing the recognition results associated with a single character of the recognized code.
 */
export interface Character {
  code?: Code2;
  bgDark?: DarkBackground;
  bgColor?: BackgroundColor;
  color?: TextColor;
  confidence?: Confidence2;
  charROI?: CharacterRegionOfInterest;
  [k: string]: unknown;
}
/**
 * The color of the background of the character.
 */
export interface BackgroundColor {
  b?: Blue;
  g?: Green;
  r?: Red;
  [k: string]: unknown;
}
/**
 * The color of the character.
 */
export interface TextColor {
  b?: Blue1;
  g?: Green1;
  r?: Red1;
  [k: string]: unknown;
}
/**
 * The quadrangle (not necessarily a rectangle) where the character has been found.
 */
export interface CharacterRegionOfInterest {
  bottomLeft?: BottomLeft;
  bottomRight?: BottomRight;
  topLeft?: TopLeft;
  topRight?: TopRight;
  [k: string]: unknown;
}
/**
 * Coordinates of the bottom left corner of the region in the uploaded image.
 */
export interface BottomLeft {
  x?: XCoordinate;
  y?: YCoordinate;
  [k: string]: unknown;
}
/**
 * Coordinates of the bottom right corner of the region in the uploaded image.
 */
export interface BottomRight {
  x?: XCoordinate1;
  y?: YCoordinate1;
  [k: string]: unknown;
}
/**
 * Coordinates of the top left corner of the region in the uploaded image.
 */
export interface TopLeft {
  x?: XCoordinate2;
  y?: YCoordinate2;
  [k: string]: unknown;
}
/**
 * Coordinates of the top right corner of the region in the uploaded image.
 */
export interface TopRight {
  x?: XCoordinate3;
  y?: YCoordinate3;
  [k: string]: unknown;
}
